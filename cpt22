#include <SFML/Graphics.hpp>
#include <vector>

// 게임 창 크기
const int windowWidth = 800;
const int windowHeight = 600;

// 게임 객체 크기
const float ballRadius = 10.f;
const sf::Vector2f paddleSize(100.f, 20.f);
const sf::Vector2f blockSize(60.f, 20.f);

// 게임 객체 속도
const float ballSpeed = 300.f;
const float paddleSpeed = 600.f;

int main() {
    sf::RenderWindow window(sf::VideoMode(windowWidth, windowHeight), "Block Breaker");

    // 배경 설정
    window.clear(sf::Color::Cyan);

    // 공 설정
    sf::CircleShape ball(ballRadius);
    ball.setFillColor(sf::Color::Red);
    ball.setOrigin(ballRadius, ballRadius);
    ball.setPosition(windowWidth / 2, windowHeight / 2);

    // 배트 설정
    sf::RectangleShape paddle(paddleSize);
    paddle.setFillColor(sf::Color::Blue);
    paddle.setOrigin(paddleSize / 2.f);
    paddle.setPosition(windowWidth / 2, windowHeight - 50);

    // 블록 설정
    std::vector<sf::RectangleShape> blocks;
    for (int i = 0; i < 10; ++i) {
        for (int j = 0; j < 5; ++j) {
            sf::RectangleShape block(blockSize);
            block.setFillColor(sf::Color::Green);
            block.setPosition(100.f + i * (blockSize.x + 5.f), 50.f + j * (blockSize.y + 5.f));
            blocks.push_back(block);
        }
    }

    sf::Clock clock;
    sf::Vector2f ballVelocity(ballSpeed, ballSpeed);
    int lives = 5;

    while (window.isOpen()) {
        sf::Time deltaTime = clock.restart();

        // 이벤트 처리
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        // 배트 이동
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Left) && paddle.getPosition().x - paddleSize.x / 2 > 0) {
            paddle.move(-paddleSpeed * deltaTime.asSeconds(), 0.f);
        }
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right) && paddle.getPosition().x + paddleSize.x / 2 < windowWidth) {
            paddle.move(paddleSpeed * deltaTime.asSeconds(), 0.f);
        }

        // 공 이동
        ball.move(ballVelocity * deltaTime.asSeconds());

        // 벽과 충돌 처리
        if (ball.getPosition().x - ballRadius < 0 || ball.getPosition().x + ballRadius > windowWidth) {
            ballVelocity.x = -ballVelocity.x;
        }
        if (ball.getPosition().y - ballRadius < 0) {
            ballVelocity.y = -ballVelocity.y;
        }

        // 배트와 충돌 처리
        if (ball.getGlobalBounds().intersects(paddle.getGlobalBounds())) {
            ballVelocity.y = -ballVelocity.y;
            ball.setPosition(ball.getPosition().x, paddle.getPosition().y - ballRadius - paddleSize.y / 2);
        }

        // 바닥과 충돌 처리
        if (ball.getPosition().y + ballRadius > windowHeight) {
            lives--;
            ball.setPosition(windowWidth / 2, windowHeight / 2);
            ballVelocity.y = -ballSpeed;
            if (lives <= 0) {
                window.close();  // 게임 종료
            }
        }

        // 블록과 충돌 처리
        for (auto it = blocks.begin(); it != blocks.end();) {
            if (ball.getGlobalBounds().intersects(it->getGlobalBounds())) {
                ballVelocity.y = -ballVelocity.y;
                it = blocks.erase(it);
            } else {
                ++it;
            }
        }

        // 화면 렌더링
        window.clear(sf::Color::Cyan);
        window.draw(ball);
        window.draw(paddle);
        for (const auto& block : blocks) {
            window.draw(block);
        }
        window.display();
    }

    return 0;
}